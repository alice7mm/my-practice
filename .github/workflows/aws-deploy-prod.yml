name: Deploy to Amazon ECS for Prod

on:
  push:
    branches-ignore:
      - '**'
    tags:
      - 'v[0-9]+-[0-9]+'
env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: 370242726818.dkr.ecr.ap-northeast-1.amazonaws.com/test-ecr
  ECS_SERVICE: test-ecs-service-prod
  ECS_CLUSTER: test-ecs-prod
  ECS_TASK_DEFINITION: test-task-prod
  CODE_DEPLOY_APP_NAME: AppECS-test-ecs-prod-test-ecs-service-prod
  CODE_DEPLOY_DPG_NAME: DgpECS-test-ecs-prod-test-ecs-service-prod
  CONTAINER_NAME: test-container-prod

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    # - name: Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and
    #     # push it to ECR so that it can
    #     # be deployed to ECS.
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    - name: Download task definition
      run: |
        echo "$(ls -al /home/runner/work/my-practice)"
        echo "$(ls -al /home/runner/work/my-practice/my-practice)"
        echo "$(cat aws_ci_cd/appspec.yml)"
        echo "$(cat ./aws_ci_cd/appspec.yml)"
    #     aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json
    # - name: Create image tag
    #   env:
    #     GITHUB_SHA: ${{ github.sha }}
    #   id: create-image-tag
    #   run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c 1-7)"
    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definition.json
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ env.ECR_REPOSITORY }}:${{ steps.create-image-tag.outputs.IMAGE_TAG }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true

    # - name: Run AWS CodeDeploy
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }} 
    #     wait-for-service-stability: false
    #     codedeploy-appspec: aws_ci_cd/appspec.yml
    #     codedeploy-application: ${{ env.CODE_DEPLOY_APP_NAME }}
    #     codedeploy-deployment-group: ${{ env.CODE_DEPLOY_DPG_NAME }}
